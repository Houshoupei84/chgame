// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package gameproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Person_PhoneType int32

const (
	Person_MOBILE Person_PhoneType = 0
	Person_HOME   Person_PhoneType = 1
	Person_WORK   Person_PhoneType = 2
)

var Person_PhoneType_name = map[int32]string{
	0: "MOBILE",
	1: "HOME",
	2: "WORK",
}
var Person_PhoneType_value = map[string]int32{
	"MOBILE": 0,
	"HOME":   1,
	"WORK":   2,
}

func (x Person_PhoneType) String() string {
	return proto.EnumName(Person_PhoneType_name, int32(x))
}
func (Person_PhoneType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type Person struct {
	Name   string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id     int32                 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Email  string                `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phones []*Person_PhoneNumber `protobuf:"bytes,4,rep,name=phones" json:"phones,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Person) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Person) GetPhones() []*Person_PhoneNumber {
	if m != nil {
		return m.Phones
	}
	return nil
}

type Person_PhoneNumber struct {
	Number string           `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	Type   Person_PhoneType `protobuf:"varint,2,opt,name=type,enum=gameproto.Person_PhoneType" json:"type,omitempty"`
}

func (m *Person_PhoneNumber) Reset()                    { *m = Person_PhoneNumber{} }
func (m *Person_PhoneNumber) String() string            { return proto.CompactTextString(m) }
func (*Person_PhoneNumber) ProtoMessage()               {}
func (*Person_PhoneNumber) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *Person_PhoneNumber) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Person_PhoneNumber) GetType() Person_PhoneType {
	if m != nil {
		return m.Type
	}
	return Person_MOBILE
}

// Our address book file is just one of these.
type AddressBook struct {
	People []*Person `protobuf:"bytes,1,rep,name=people" json:"people,omitempty"`
}

func (m *AddressBook) Reset()                    { *m = AddressBook{} }
func (m *AddressBook) String() string            { return proto.CompactTextString(m) }
func (*AddressBook) ProtoMessage()               {}
func (*AddressBook) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *AddressBook) GetPeople() []*Person {
	if m != nil {
		return m.People
	}
	return nil
}

func init() {
	proto.RegisterType((*Person)(nil), "gameproto.Person")
	proto.RegisterType((*Person_PhoneNumber)(nil), "gameproto.Person.PhoneNumber")
	proto.RegisterType((*AddressBook)(nil), "gameproto.AddressBook")
	proto.RegisterEnum("gameproto.Person_PhoneType", Person_PhoneType_name, Person_PhoneType_value)
}

func init() { proto.RegisterFile("test.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xd1, 0x4b, 0xc3, 0x30,
	0x10, 0x87, 0x4d, 0xd7, 0x05, 0x7b, 0x85, 0x51, 0x0f, 0x91, 0xa2, 0x08, 0xa5, 0x4f, 0x15, 0xa1,
	0xc2, 0x44, 0xf0, 0xd5, 0xc1, 0x40, 0xd1, 0xd9, 0x11, 0x44, 0x9f, 0x3b, 0x7a, 0x68, 0x71, 0x6d,
	0x42, 0x13, 0x1f, 0xf6, 0xcf, 0x8b, 0x24, 0x0b, 0x45, 0x10, 0xdf, 0xbe, 0xfb, 0xe5, 0xe3, 0xee,
	0x72, 0x00, 0x86, 0xb4, 0x29, 0xd5, 0x20, 0x8d, 0xc4, 0xe8, 0xbd, 0xee, 0xc8, 0x61, 0xfe, 0xcd,
	0x80, 0xaf, 0x69, 0xd0, 0xb2, 0x47, 0x84, 0xb0, 0xaf, 0x3b, 0x4a, 0x59, 0xc6, 0x8a, 0x48, 0x38,
	0xc6, 0x19, 0x04, 0x6d, 0x93, 0x06, 0x19, 0x2b, 0xa6, 0x22, 0x68, 0x1b, 0x3c, 0x86, 0x29, 0x75,
	0x75, 0xbb, 0x4d, 0x27, 0x4e, 0xda, 0x17, 0x78, 0x03, 0x5c, 0x7d, 0xc8, 0x9e, 0x74, 0x1a, 0x66,
	0x93, 0x22, 0x9e, 0x9f, 0x97, 0xe3, 0x80, 0x72, 0xdf, 0xbc, 0x5c, 0xdb, 0xf7, 0xe7, 0xaf, 0x6e,
	0x43, 0x83, 0xf0, 0xf2, 0xe9, 0x2b, 0xc4, 0xbf, 0x62, 0x3c, 0x01, 0xde, 0x3b, 0xf2, 0x1b, 0xf8,
	0x0a, 0xaf, 0x20, 0x34, 0x3b, 0x45, 0x6e, 0x8b, 0xd9, 0xfc, 0xec, 0x9f, 0xde, 0x2f, 0x3b, 0x45,
	0xc2, 0x89, 0xf9, 0x25, 0x44, 0x63, 0x84, 0x00, 0x7c, 0x55, 0x2d, 0x1e, 0x9e, 0x96, 0xc9, 0x01,
	0x1e, 0x42, 0x78, 0x5f, 0xad, 0x96, 0x09, 0xb3, 0xf4, 0x56, 0x89, 0xc7, 0x24, 0xc8, 0x6f, 0x21,
	0xbe, 0x6b, 0x9a, 0x81, 0xb4, 0x5e, 0x48, 0xf9, 0x89, 0x17, 0xc0, 0x15, 0x49, 0xb5, 0xb5, 0x67,
	0xb0, 0x5f, 0x39, 0xfa, 0x33, 0x4e, 0x78, 0x61, 0xc3, 0x5d, 0x7a, 0xfd, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x0f, 0xaf, 0xe0, 0xa4, 0x5a, 0x01, 0x00, 0x00,
}
